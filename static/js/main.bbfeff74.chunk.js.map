{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","deck1","setDeck1","deck2","setDeck2","diff","setDiff","createDiff","a","b","length","setA","setB","_difference","Set","elem","delete","difference","split","join","handleChange","value","deck","className","name","id","cols","rows","onChange","event","target","onClick","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAsFeA,MAtEf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAiB,IAF9B,mBAENG,EAFM,KAECC,EAFD,OAGWJ,mBAAiB,mCAH5B,mBAGNK,EAHM,KAGAC,EAHA,KAUb,SAASC,EAAWC,EAAWC,GAC7B,GAAiB,IAAbD,EAAEE,QAA6B,IAAbD,EAAEC,OAAxB,CAIA,IAAML,EAvBV,SAAoBM,EAAmBC,GACrC,IADwD,EACpDC,EAAc,IAAIC,IAAIH,GAD8B,cAEvCC,GAFuC,IAExD,2BAAuB,CAAC,IAAfG,EAAc,QACrBF,EAAYG,OAAOD,IAHmC,8BAKxD,OAAOF,EAkBQI,CAAW,IAAIH,IAAIN,EAAEU,MAAM,OAAQ,IAAIJ,IAAIL,EAAES,MAAM,QAChEZ,EAAQ,YAAID,GAAMc,KAAK,QAGzB,SAASC,EAAaC,EAAeC,GACtB,IAATA,GACFpB,EAASmB,GACTd,EAAWc,EAAOlB,KAElBC,EAASiB,GACTd,EAAWN,EAAOoB,IAItB,OACE,sBAAKE,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAf,SACE,0BACEC,KAAK,QACLC,GAAG,QACHC,KA/CC,GAgDDC,KA/CC,GAgDDN,MAAOpB,EACP2B,SAAU,SAACC,GAAD,OAAWT,EAAaS,EAAMC,OAAOT,MAAO,QAG1D,wBAAQE,UAAU,OAAOQ,QArC/B,WACE7B,EAASC,GACTC,EAASH,IAmCL,0BAGA,qBAAKsB,UAAU,OAAf,SACE,0BACEC,KAAK,QACLC,GAAG,QACHC,KA5DC,GA6DDC,KA5DC,GA6DDN,MAAOlB,EACPyB,SAAU,SAACC,GAAD,OAAWT,EAAaS,EAAMC,OAAOT,MAAO,WAI5D,qBAAKE,UAAU,OAAf,SACE,0BACEC,KAAK,OACLC,GAAG,OACHC,KAvEG,GAwEHC,KAvEG,GAwEHN,MAAOhB,EACP2B,UAAQ,UCjEHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbfeff74.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\ntype Deck = { name: string; qty: number }[];\n\nconst COLS = 30;\nconst ROWS = 10;\n\nfunction difference(setA: Set<string>, setB: Set<string>) {\n  let _difference = new Set(setA);\n  for (let elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\nfunction App() {\n  const [deck1, setDeck1] = useState<string>(\"\");\n  const [deck2, setDeck2] = useState<string>(\"\");\n  const [diff, setDiff] = useState<string>(\"the diff will be generated here\");\n\n  function handleSwap() {\n    setDeck1(deck2);\n    setDeck2(deck1);\n  }\n\n  function createDiff(a: string, b: string) {\n    if (a.length === 0 || b.length === 0) {\n      return;\n    }\n\n    const diff = difference(new Set(a.split(\"\\n\")), new Set(b.split(\"\\n\")));\n    setDiff([...diff].join(\"\\n\"));\n  }\n\n  function handleChange(value: string, deck: 1 | 2) {\n    if (deck === 1) {\n      setDeck1(value);\n      createDiff(value, deck2);\n    } else {\n      setDeck2(value);\n      createDiff(deck1, value);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"lists\">\n        <div className=\"list\">\n          <textarea\n            name=\"deck1\"\n            id=\"deck1\"\n            cols={COLS}\n            rows={ROWS}\n            value={deck1}\n            onChange={(event) => handleChange(event.target.value, 1)}\n          />\n        </div>\n        <button className=\"swap\" onClick={handleSwap}>\n          ðŸ”„\n        </button>\n        <div className=\"list\">\n          <textarea\n            name=\"deck2\"\n            id=\"deck2\"\n            cols={COLS}\n            rows={ROWS}\n            value={deck2}\n            onChange={(event) => handleChange(event.target.value, 2)}\n          />\n        </div>\n      </div>\n      <div className=\"diff\">\n        <textarea\n          name=\"diff\"\n          id=\"diff\"\n          cols={COLS}\n          rows={ROWS}\n          value={diff}\n          readOnly\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}